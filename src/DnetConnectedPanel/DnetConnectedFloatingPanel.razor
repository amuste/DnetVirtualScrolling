@using DnetConnectedPanel.Infrastructure.Models.FilterModels
@using Microsoft.AspNetCore.Components.Forms

<div class="dnet-menu-container" style="height: 300px; width: 250px;">
    <div class="row dnet-p-10">
        <div class="col-12">
            <div class="d-flex">
                <div class="blg-adv-filter-wrapper dnet-p-t-15">
                    <EditForm EditContext="@_userEditContext" OnValidSubmit="HandleValidSubmit" class="coms-p-l-10 coms-p-r-10">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <div class="blg-adv-filter-select">
                                <InputSelect @bind-Value="FilterData.Operator" class="form-control form-control-sm">
                                    @if (FilterData.Type == FilterType.Text)
                                    {
                                        <option value="None"></option>
                                        <option value="Equals">Equal</option>
                                        <option value="NotEquals">Not equal</option>
                                        <option value="StartsWith">Starts with</option>
                                        <option value="EndsWith">Ends with</option>
                                        <option value="Contains">Contains</option>
                                        <option value="NotContains">Not Contains</option>
                                    }
                                    @if (FilterData.Type == FilterType.Number)
                                    {
                                        <option value="None"></option>
                                        <option value="Equals">Equal</option>
                                        <option value="NotEquals">Not equal</option>
                                        <option value="GreaterThan">Greater than</option>
                                        <option value="LessThan">Less than</option>
                                    }
                                </InputSelect>
                                @*<ValidationMessage For="@(() => User.Type)" />*@
                            </div>
                        </div>
                        <div class="form-group">
                            <InputText @bind-Value="FilterData.Value" class="form-control form-control-sm blg-adv-filter-input-search" />
                            @*<ValidationMessage For="@(() => User.Name)" />*@
                        </div>
                        <div class="form-group">
                            <div class=" blg-adv-filter-select">
                                <InputSelect @bind-Value="FilterData.Condition" class="form-control form-control-sm">
                                    <option value="None"></option>
                                    <option value="And">And</option>
                                    <option value="Or">Or</option>
                                </InputSelect>
                                @*<ValidationMessage For="@(() => User.Type)" />*@
                            </div>
                        </div>
                        <div class="form-group">
                            <div class=" blg-adv-filter-select">
                                <InputSelect @bind-Value="FilterData.AdditionalOperator" class="form-control form-control-sm">
                                    @if (FilterData.Type == FilterType.Text)
                                    {
                                        <option value="None"></option>
                                        <option value="Equals">Equal</option>
                                        <option value="NotEquals">Not equal</option>
                                        <option value="StartsWith">Starts with</option>
                                        <option value="EndsWith">Ends with</option>
                                        <option value="Contains">Contains</option>
                                        <option value="NotContains">Not Contains</option>
                                    }
                                    @if (FilterData.Type == FilterType.Number)
                                    {
                                        <option value="None"></option>
                                        <option value="Equals">Equal</option>
                                        <option value="NotEquals">Not equal</option>
                                        <option value="GreaterThan">Greater than</option>
                                        <option value="LessThan">Less than</option>
                                    }
                                </InputSelect>
                                @*<ValidationMessage For="@(() => User.Type)" />*@
                            </div>
                        </div>
                        <div class="form-group">
                            <InputText @bind-Value="FilterData.AdditionalValue" class="form-control form-control-sm blg-adv-filter-input-search" />
                            @*<ValidationMessage For="@(() => User.LastName)" />*@
                        </div>

                        <div class="row align-items-center justify-content-end dnet-p-r-15">
                            <button class="btn btn-sm blg-adv-filter-buttom-reset dnet-m-r-10" type="button" @onclick="OnBack">Reset</button>
                            <button class="btn btn-sm blg-adv-filter-buttom-ok" type="submit" disabled="@_formInvalid">Filter</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public FilterModel FilterData { get; set; }

    private bool _formInvalid = true;

    private EditContext _userEditContext;

    protected override void OnInitialized()
    {
        _userEditContext = new EditContext(FilterData);

        _userEditContext.OnFieldChanged += (data, eventArgs) =>
        {
            _formInvalid = !_userEditContext.Validate();
            StateHasChanged();
        };
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("All is OK");
    }

}
