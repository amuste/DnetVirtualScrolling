@using DnetAutocompleteComponent.Infrastructure.Interfaces
@using DnetAutocompleteComponent.Infrastructure.Services
@using DnetOverlayComponent.Infrastructure.Enums
@using DnetOverlayComponent.Infrastructure.Interfaces
@using DnetOverlayComponent.Infrastructure.Services
@using DnetOverlayComponent.Infrastructure.Services.CssBuilder
@using Microsoft.AspNetCore.Components.Web

@typeparam TItem

@inject IOverlayService OverlayService

@implements IDisposable;

<div class="dnet-autoc-menu-container" style="@_styles">
    <div class="dnet-autoc-menu-container-filter-wrapper">
        @foreach (var item in Items)
        {
            <div @onclick="@(_ => SelectItem(item))" style="margin-bottom: 2px">
                @if (CellTemplate != null && typeof(ComponentBase).IsAssignableFrom(CellTemplate))
                {
                    <div class="dnet-autoc-content-wrapper">
                        @CreateCellTemplateComponent(item, CellTemplate)
                        <span class="dnet-autoc-content-text has-content">@DisplayValueConverter(item)</span>
                    </div>
                }
                else
                {
                    <span class="dnet-autoc-content-text">@DisplayValueConverter(item)</span>
                }
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    private int OverlayReferenceId { get; set; }


    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public string Width { get; set; } = null;

    [Parameter]
    public string Height { get; set; } = null;

    [Parameter]
    public string MinWidth { get; set; } = null;

    [Parameter]
    public string MinHeight { get; set; } = null;

    [Parameter]
    public string MaxWidth { get; set; } = null;

    [Parameter]
    public string MaxHeight { get; set; } = null;

    [Parameter]
    public AutoCompleteListService<TItem> AutoCompleteListService { get; set; }

    [Parameter]
    public Func<TItem, string> DisplayValueConverter { get; set; }

    [Parameter]
    public Type CellTemplate { get; set; } = null;


    private string _styles { get; set; } = null;


    protected override void OnInitialized()
    {
        _styles = GetStyles();

        AutoCompleteListService.OnUpdateList += ListUpdated;
    }

    private string GetStyles()
    {
        var styles = new StyleBuilder()
            .AddStyle("width", Width, when: !string.IsNullOrEmpty(Width))
            .AddStyle("height", Height, when: !string.IsNullOrEmpty(Height))
            .AddStyle("min-height", MinHeight, when: !string.IsNullOrEmpty(MinHeight))
            .AddStyle("min-width", MinWidth, when: !string.IsNullOrEmpty(MinWidth))
            .AddStyle("max-width", MaxWidth, when: !string.IsNullOrEmpty(MaxWidth))
            .AddStyle("max-height", MaxHeight, when: !string.IsNullOrEmpty(MaxHeight))
            .Build();

        return styles;
    }

    private RenderFragment CreateCellTemplateComponent(TItem item, Type componeType) => builder =>
    {
        builder.OpenComponent(0, componeType);
        builder.AddAttribute(1, "Item", item);
        builder.CloseComponent();
    };

    private void ListUpdated(List<TItem> items)
    {
        Items = items;
        StateHasChanged();
    }

    private void SelectItem(TItem item)
    {
        AutoCompleteListService.UpdateSelectedItem(item);
    }

    public void Dispose()
    {
        AutoCompleteListService.OnUpdateList -= ListUpdated;
    }

}
