
:root {
    --dnet-tooltip-horizontal-padding: 8px;
    --dnet-tooltip-max-width: 250px;
    --dnet-tooltip-margin: 14px;
    --dnet-tooltip-handset-horizontal-padding: 16px;
    --dnet-tooltip-handset-margin: 24px;
    --dnet-tooltip-border-radius: 0px;
}

@mixin _dnet-virtual-scroll-clear-container-space($direction) {
    $start: if($direction == horizontal, 'left', 'top');
    $end: if($direction == horizontal, 'right', 'bottom');

    & > dl:not([cdkVirtualFor]),
    & > ol:not([cdkVirtualFor]),
    & > table:not([cdkVirtualFor]),
    & > ul:not([cdkVirtualFor]) {
        padding: {
            #{$start}: 0;
            #{$end}: 0;
        }

        margin: {
            #{$start}: 0;
            #{$end}: 0;
        }

        border: {
            #{$start}-width: 0;
            #{$end}-width: 0;
        }

        outline: none;
    }
}

.dnet-virtual-scroll-viewport {
    display: block;
    position: relative;
    overflow: auto;
    contain: strict;
    transform: translateZ(0);
    will-change: scroll-position;
    -webkit-overflow-scrolling: touch;
}

/**Wrapper element for the rendered content. This element will be transformed to push the rendered
 content to its correct offset in the data set as a whole.**/
.dnet-virtual-scroll-content-wrapper {
    position: absolute;
    top: 0px;
    left: 0;
    contain: content;
}

.dnet-virtual-scroll-orientation-horizontal .dnet-virtual-scroll-content-wrapper {
    min-height: 100%;
    @include _dnet-virtual-scroll-clear-container-space(horizontal);
}

.dnet-virtual-scroll-orientation-vertical .dnet-virtual-scroll-content-wrapper {
    min-width: 100%;
    @include _dnet-virtual-scroll-clear-container-space(vertical);
}

// Spacer element that whose width or height will be adjusted to match the size of the entire data
// set if it were rendered all at once. This ensures that the scrollable content region is the
// correct size.
.dnet-virtual-scroll-spacer {
    position: absolute;
    top: 0;
    left: 0;
    height: 1px;
    width: 1px;
    transform-origin: 0 0;
    // Note: We can't put `will-change: transform;` here because it causes Safari to not update the
    // viewport's `scrollHeight` when the spacer's transform changes.
    [dir='rtl'] & {
        right: 0;
        left: auto;
        transform-origin: 100% 0;
    }
}

.example-viewport {
    height: 200px;
    width: 100%;
    border: 1px solid black;
}

.example-item {
    height: 50px;
}
